<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>snippets on Dev-Coach</title>
    <link>//dev-coach.me/tags/snippets/</link>
    <description>Recent content in snippets on Dev-Coach</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="//dev-coach.me/tags/snippets/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redrawing Vim Screen</title>
      <link>//dev-coach.me/snippets/redrawing-vim-screen/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>//dev-coach.me/snippets/redrawing-vim-screen/</guid>
      <description>Part of my current workflow for web development is writing code in NeoVim in a Terminal on one screen and checking results in the browser on another screen. The screens are virtual and I can change them using the &amp;lt;Cmd&amp;gt; ← and &amp;lt;Cmd&amp;gt; →.
Reloading the browser tab I use &amp;lt;Cmd&amp;gt; R.
When switching screens and reloading is down quickly it happens that the &amp;lt;Cmd&amp;gt; R hits the terminal which results in a nicely cleared terminal.</description>
    </item>
    
    <item>
      <title>Async/Await and Array.forEach</title>
      <link>//dev-coach.me/snippets/looping-async-await-in-javascript/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>//dev-coach.me/snippets/looping-async-await-in-javascript/</guid>
      <description>Assuming we have two async calls to a database that return a promise. asyncDbCall1 takes longer then asyncDbCall2.
const asyncDbCall1 = () =&amp;gt; { return new Promise((resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt; { resolve(1) }, 200); }) }; const asyncDbCall2 = () =&amp;gt; { return new Promise((resolve, reject) =&amp;gt; { setTimeout(() =&amp;gt; { resolve(2) }, 100); }) }; Calling them in sequence using Array.forEach:
[asyncDbCall1, asyncDbCall2].forEach(async (promise) =&amp;gt; { const data = await promise(); console.</description>
    </item>
    
  </channel>
</rss>